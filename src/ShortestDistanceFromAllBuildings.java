import java.util.LinkedList;
import java.util.Queue;

public class ShortestDistanceFromAllBuildings {

	final int[] shift = new int[] { 0, 1, 0, -1, 0 };

	public int shortestDistance(int[][] grid) {
		int m = grid.length;
		int n = grid[0].length;
		int numberOfHouse = 0;
		int[][] record = new int[m][n];
		int[][] accessible = new int[m][n];//
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					boolean[][] visited = new boolean[m][n]; // point has been visited or not
					numberOfHouse++;
					DFS(grid, i, j, record, accessible, visited);
				}
			}
		}
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j]==0 && accessible[i][j] == numberOfHouse) {
					if (record[i][j] < min) {
						min = record[i][j];
					}
				}
			}
		}
		return min == Integer.MAX_VALUE ? -1 : min;
	}

	private void DFS(int[][] grid, int i, int j, int[][] record,
			int[][] accessible, boolean[][] visited) {
		int m = grid.length;
		int n = grid[0].length;
		int step = 1;
		Queue<int[]> queue = new LinkedList<int[]>();
		queue.offer(new int[]{i,j});
		while (!queue.isEmpty()) {
			int qsize = queue.size();
			for (int i1 = 0; i1 < qsize; i1++) {
				int[] curPoint = queue.poll();
				//System.out.println(Arrays.toString(curPoint));
				for (int k = 0; k < 4; k++) {
					int x1 = curPoint[0] + shift[k];
					int y1 = curPoint[1] + shift[k + 1];
					if (x1 >= 0 && x1 < m && y1 >= 0 && y1 < n
							&& !visited[x1][y1] && grid[x1][y1] == 0) {
						accessible[x1][y1]++;
						visited[x1][y1] = true;
						record[x1][y1] += step;
						queue.offer(new int[]{x1,y1});
					}
				}
			}
			step++;
		}
	}

	public static void main(String[] args) {
		ShortestDistanceFromAllBuildings s = new ShortestDistanceFromAllBuildings();
		int[][] grid = new int[][]{{1,0,2,0,1},{0,0,0,0,0},{0,0,1,0,0}};
/*		int[][] grid = new int[][] {
				{ 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 1,
						0, 0, 2, 0, 1, 2, 2, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 0,
						2, 2, 0, 2, 0, 0, 0, 0, 2, 2 },
				{ 0, 2, 0, 0, 1, 2, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0,
						0, 2, 0, 2, 2, 1, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 2, 2,
						2, 0, 0, 0, 2, 2, 2, 0, 2, 2 },
				{ 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 1, 1, 2,
						0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 2, 0, 2,
						2, 2, 0, 0, 2, 0, 0, 0, 2, 1 },
				{ 2, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 2,
						1, 2, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 2,
						1, 1, 2, 2, 0, 2, 2, 2, 0, 2 },
				{ 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2,
						0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2,
						0, 2, 2, 2, 2, 2, 2, 0, 2, 2 },
				{ 2, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0,
						2, 0, 0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0,
						2, 2, 2, 0, 0, 1, 0, 2, 2, 0 },
				{ 0, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 2, 0, 0, 1, 2, 2, 2, 0,
						0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,
						2, 1, 0, 2, 1, 0, 0, 0, 0, 1 },
				{ 1, 0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 0, 2, 0, 2, 0, 0,
						0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2,
						0, 2, 2, 2, 0, 0, 0, 2, 0, 2 },
				{ 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0,
						0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0,
						2, 0, 0, 2, 0, 0, 2, 0, 2, 0 },
				{ 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 1,
						2, 2, 2, 2, 0, 1, 1, 0, 0, 0, 2, 1, 0, 2, 0, 2, 0, 0,
						2, 2, 0, 0, 0, 0, 2, 0, 2, 0 },
				{ 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 1, 0,
						2, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 1, 0,
						0, 2, 2, 0, 2, 0, 0, 0, 0, 0 },
				{ 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 0, 2, 2, 0, 0,
						0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 0,
						0, 0, 0, 2, 0, 2, 0, 0, 2, 0 },
				{ 0, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0, 0, 2, 2, 0, 2, 0, 2, 2, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2,
						0, 0, 2, 2, 1, 0, 0, 0, 2, 2 },
				{ 0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2,
						0, 0, 2, 0, 0, 0, 2, 0, 0, 2 },
				{ 0, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0,
						0, 2, 0, 2, 0, 0, 0, 0, 2, 2, 1, 2, 2, 0, 2, 2, 2, 0,
						2, 0, 2, 0, 0, 2, 1, 0, 0, 2 },
				{ 2, 0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 1, 0, 2, 0, 2,
						0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 1,
						2, 2, 2, 0, 0, 0, 0, 0, 0, 1 },
				{ 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0,
						0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0,
						0, 2, 0, 2, 0, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0,
						2, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 2, 0, 2, 0, 1, 2,
						0, 2, 0, 0, 1, 0, 0, 0, 0, 2 },
				{ 0, 0, 0, 0, 0, 2, 2, 1, 2, 0, 1, 0, 0, 0, 0, 2, 0, 2, 1, 2,
						2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2,
						2, 1, 2, 0, 0, 0, 0, 0, 2, 0 },
				{ 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0,
						2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 2,
						1, 2, 0, 0, 0, 0, 2, 0, 2, 2 },
				{ 0, 0, 0, 0, 2, 2, 2, 0, 1, 2, 0, 0, 2, 2, 1, 2, 2, 0, 0, 0,
						2, 2, 2, 0, 0, 0, 0, 1, 0, 2, 0, 2, 2, 2, 2, 0, 0, 0,
						0, 0, 2, 0, 0, 2, 0, 0, 2, 2 } };
						*/
		System.out.println(s.shortestDistance(grid));
	}
}